import 'dart:async';import 'dart:io';import 'package:flutter/material.dart';import '/core/utils/resources/resources_exporter.dart';const successColor = ColorManager.primaryColor;const errorColor = ColorManager.redBorder;const infoColor = ColorManager.blueToastColor;const warningColor = ColorManager.goldy;EdgeInsetsGeometry paddingApp = const EdgeInsets.all(15);bool isRtl = false;List<BoxShadow> shadowDark = [  const BoxShadow(      color: Color(0x66000000),      spreadRadius: 8,      blurRadius: 15,      offset: Offset(0, 5))];List<BoxShadow> shadowLight = [  const BoxShadow(      color: Color(0xFFd8d7da),      spreadRadius: 5,      blurRadius: 10,      offset: Offset(0, 5))];const initialGender = 0;String socialMediaImagePathByValue(String value) {  switch (value) {    case 'facebook':      return 'facebookSVG';    case 'instagram':      return 'instagramSVG';    case 'twitter':      return 'twitterSVG';    case 'linkedin':      return 'linkedinSVG';    case 'x':      return 'xSVG';    default:      return '';  }}EdgeInsetsGeometry defaultPadding = const EdgeInsets.symmetric(horizontal: 20);bool isValidPhoneNumber(String phoneNumber) {  RegExp regExp = RegExp(r'^[+0-9]+$');  if (phoneNumber.length < 8 || phoneNumber.length > 15) {    return false;  }  return regExp.hasMatch(phoneNumber);}bool isValidOTP(String otp) {  RegExp regExp = RegExp(r'^[+0-9]+$');  if (otp.length != 6) {    return false;  }  return regExp.hasMatch(otp);}bool isValidEmail(String email) {  final RegExp regex = RegExp(    r'^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$',    caseSensitive: false,    multiLine: false,  );  return regex.hasMatch(email);}bool isValidPassword(String password) {  final RegExp regex = RegExp(    r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$',    caseSensitive: true,    multiLine: false,  );  return regex.hasMatch(password);}bool hasLowercase(String password) {  final RegExp lowercaseRegex = RegExp(r'(?=.*[a-z])');  return lowercaseRegex.hasMatch(password);}bool hasUppercase(String password) {  final RegExp uppercaseRegex = RegExp(r'(?=.*[A-Z])');  return uppercaseRegex.hasMatch(password);}bool hasDigit(String password) {  final RegExp digitRegex = RegExp(r'(?=.*\d)');  return digitRegex.hasMatch(password);}bool hasSpecialCharacter(String password) {  final RegExp specialCharRegex = RegExp(r'(?=.*[@$!%*?&])');  return specialCharRegex.hasMatch(password);}bool isValidLength(String password) {  return password.length >= 8;}bool isValidName(String name) {  final RegExp regex = RegExp(    r'^[a-zA-Z\s]{3,}$',    caseSensitive: false,    multiLine: false,  );  final arabicNameRegExp =      RegExp(r'^(?!.*[\d\u0660-\u0669])[\u0600-\u06FF\s]{2,}$');  bool validName = regex.hasMatch(name) || arabicNameRegExp.hasMatch(name);  return validName;}bool isValidPassportNumber(String passportNumber) {  final RegExp regex = RegExp(    r'^[A-Z][0-9]+$',    caseSensitive: false,    multiLine: false,  );  return regex.hasMatch(passportNumber);}